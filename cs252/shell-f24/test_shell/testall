#!/bin/bash
opt="part3"
grade=0
grade_max=0
totalmax=0

make -C ../ git-commit

# test runner
# parameters: testname testpoints
run_test () {
    test_name=$1
    test_pts=$2
    grade_max=$(echo "$grade_max + $test_pts" | bc)
    totalmax=$(echo  "$totalmax + $test_pts" | bc)
    if [[ $opt == "test" ]]; then
        # if running a single test, show all the output
        echo -e "\033[1;33m\n$test_name\033[0m"
        prlimit --nproc=25 --cpu=25 ./$test_name
        res=$?
    else
        # if running the testall, don't show all the output,
        # it's too much to read
        echo -e "\033[1;33m\n$test_name\t$test_pts pts\033[0m"
        t=$(prlimit --nproc=25 --cpu=25 ./$test_name)
        res=$?
    fi
    if [ $res -ne 0 ] 
    then
        echo -e "\033[1;31m$test_name Failed\033[0m"
        if [[ $opt == "ALL" ]]; then
            echo "$test_name Failed 0/$test_pts" >> testall.out
        fi
    else
        echo -e "\033[1;32m$test_name Passed\033[0m"
        if [[ $opt == "ALL" ]]; then
            echo "$test_name Passed $test_pts/$test_pts" >> testall.out
        fi
        grade=$(echo "$grade + $test_pts" | bc)
    fi
}

# Check for parameter (and validity)
if [ $# -gt 0 ]; then
  if [[ $1 == "part1" || $1 == "part2" || $1 == "part3" ]]; then
    opt=$1
  else
      opt="test"
    run_test $1 0
    exit 0
  fi
else
  rm testall.out
  echo "Grade Report for Lab 3 Testall" >> testall.out
fi

# clear global vars before each section so they assign points per section
clear_vars () {
    grade=0
    grade_max=0
}

# pretty print the start of sections
section_start () {
    echo -e "\033[1;34m=== $1 Start === \033[0m"
}

# pretty print the end of sections
section_end () {
    echo -e "\033[1;34m\n=== $1 End ===== ($grade / $grade_max pts) \n\033[0m"
}

################
# Part 1 Tests #
################

if [[ $opt == "part1" ]]; then
    section_start "IO Redirection"                  #10 # PART 1 = 20
    clear_vars
    run_test test_redirect_input        3
    run_test test_redirect_output       3
    run_test test_redirect_error        2
    run_test test_redirect_error2       2
    run_test test_redirect_out_err      2
    run_test test_redirect_multiple     3
    run_test test_append_output         2
    grade1=$grade
    grade1max=$grade_max
    section_end "IO Redirection"

    section_start "Pipes"                           #8
    clear_vars
    run_test test_pipes1                3
    run_test test_pipes2                2
    run_test test_pipes_redirect_out    2
    run_test test_pipes_redirect_err    2
    grade2=$grade
    grade2max=$grade_max
    section_end "Pipes"

    section_start "Background Processes"            #2
    clear_vars
    run_test test_background            4
    grade3=$grade
    grade3max=$grade_max
    section_end "Background Processes"
fi

################
# Part 2 Tests #
################

if [[ $opt == "part2" ]]; then
    section_start "IO Redirection"                  #10 # PART 1 = 20
    clear_vars
    run_test test_redirect_input        .5
    run_test test_redirect_output       .5
    run_test test_redirect_error        .5
    run_test test_redirect_error2       .5
    run_test test_redirect_out_err      .5
    run_test test_redirect_multiple     .5
    run_test test_append_output         .5
    grade1=$grade
    grade1max=$grade_max
    section_end "IO Redirection"

    section_start "Pipes"                           #8
    clear_vars
    run_test test_pipes1                .5
    run_test test_pipes2                .5
    run_test test_pipes_redirect_out    .5
    run_test test_pipes_redirect_err    .5
    grade2=$grade
    grade2max=$grade_max
    section_end "Pipes"

    section_start "Background Processes"            #2
    clear_vars
    run_test test_background            .5
    grade3=$grade
    grade3max=$grade_max
    section_end "Background Processes"

    section_start "Zombie Processes"                #1 #PART 2 = 22
    clear_vars
    run_test test_zombie                2
    grade4=$grade
    grade4max=$grade_max
    section_end "Zombie Processes"

    section_start "Parsing Special Chars, Quotes, Escape Chars" #5
    clear_vars
    run_test test_parsing1              1
    run_test test_parsing2              1
    run_test test_quotes1               2
    run_test test_quotes2               2
    run_test test_escape                4
    grade5=$grade
    grade5max=$grade_max
    section_end "Parsing Special Chars, Quotes, Escape Chars"

    section_start "Builtin Functions"               #4
    clear_vars
    run_test test_printenv              2
    run_test test_setenv                1
    run_test test_unsetenv              1
    run_test test_source                4
    grade6=$grade
    grade6max=$grade_max
    section_end "Builtin Functions"

    section_start "cd"                              #2
    clear_vars
    run_test test_cd1                   1
    run_test test_cd2                   1
    run_test test_cd3                   1
    run_test test_cd4                   1
    grade7=$grade
    grade7max=$grade_max
    section_end "cd"
fi

################
# Part 3 Tests #
################

if [[ $opt == "part3" || $opt == "ALL" ]]; then
    section_start "IO Redirection"                  #10 # PART 1 = 20
    clear_vars
    run_test test_redirect_input        .25
    run_test test_redirect_output       .25
    run_test test_redirect_error        .25
    run_test test_redirect_error2       .25
    run_test test_redirect_out_err      .25
    run_test test_redirect_multiple     .25
    run_test test_append_output         .25
    grade1=$grade
    grade1max=$grade_max
    section_end "IO Redirection"

    section_start "Pipes"                           #8
    clear_vars
    run_test test_pipes1                .25
    run_test test_pipes2                .25
    run_test test_pipes_redirect_out    .25
    run_test test_pipes_redirect_err    .25
    grade2=$grade
    grade2max=$grade_max
    section_end "Pipes"

    section_start "Background Processes"            #2
    clear_vars
    run_test test_background            .25
    grade3=$grade
    grade3max=$grade_max
    section_end "Background Processes"

    section_start "Zombie Processes"                #1 #PART 2 = 22
    clear_vars
    run_test test_zombie                .25
    grade4=$grade
    grade4max=$grade_max
    section_end "Zombie Processes"

    section_start "Parsing Special Chars, Quotes, Escape Chars" #5
    clear_vars
    run_test test_parsing1              .125
    run_test test_parsing2              .125
    run_test test_quotes1               .25
    run_test test_quotes2               .25
    run_test test_escape                .25
    grade5=$grade
    grade5max=$grade_max
    section_end "Parsing Special Chars, Quotes, Escape Chars"

    section_start "Builtin Functions"               #4
    clear_vars
    run_test test_printenv              .25
    run_test test_setenv                .25
    run_test test_unsetenv              .25
    run_test test_source                .5
    grade6=$grade
    grade6max=$grade_max
    section_end "Builtin Functions"

    section_start "cd"                              #2
    clear_vars
    run_test test_cd1                   .125
    run_test test_cd2                   .125
    run_test test_cd3                   .125
    run_test test_cd4                   .125
    grade7=$grade
    grade7max=$grade_max
    section_end "cd"

    section_start "Subshell"                        #10
    clear_vars
    run_test test_subshell              8
    grade8=$grade
    grade8max=$grade_max
    section_end "Subshell"

    section_start "Environment Variable Expansion" # 7 # PART 3 = 28
    clear_vars
    run_test test_env_expand1           .5
    run_test test_env_expand2           .5
    run_test test_env_var_shell         .5
    run_test test_env_var_dollar        .5
    run_test test_env_var_question      .5
    run_test test_env_var_bang          .5
    run_test test_env_var_uscore        .5
    grade9=$grade
    grade9max=$grade_max
    section_end "Environment Variable Expansion"

    section_start "Wildcarding"                   # 9
    clear_vars
    run_test test_wildcards1 $grade11   1.5
    run_test test_wildcards2 $grade11   .5
    run_test test_wildcards3 $grade11   .5
    run_test test_wildcards4 $grade11   .5
    run_test test_wildcards5 $grade11   .5
    run_test test_wildcards6 $grade11   .5
    run_test test_wildcards7 $grade11   .5
    grade10=$grade
    grade10max=$grade_max
    section_end "Wildcarding"

    section_start "Tilde Expansion"                # 2
    clear_vars
    run_test test_tilde $grade12        1
    grade11=$grade
    grade11max=$grade_max
    section_end "Tilde Expansion"

    section_start "Robustness"                      #10
    clear_vars
    run_test test_robustness $grade13   7
    grade12=$grade
    grade12max=$grade_max
    section_end "Robustness"
fi

############################
# Computing Correct Totals #
############################

if [[ $opt == "part3" ]]; then
    total=`echo "$grade1 + $grade2 + $grade3 + $grade4 + $grade5 + \
        $grade6 + $grade7 + $grade8 + $grade9 + $grade10 + $grade11 + $grade12" | bc`
elif [[ $opt == "part2" ]]; then
    total=`echo "$grade1 + $grade2 + $grade3 + $grade4 + $grade5 + $grade6 + $grade7" | bc`
else # must be part 1
    total=`echo "$grade1 + $grade2 + $grade3" | bc`
fi

#########################
# Reporting Final Score #
#########################

# Header #

echo   "--------------------------------------------------"
if [[ $opt == "part3" ]]; then
    echo    "User:  $USER, CS252: Lab 3 - All Tests"
elif [[ $opt == "part2" ]]; then
    echo    "User:  $USER, CS252: Lab 3 - Part 2 Tests"
else # must be part 1
    echo    "User:  $USER, CS252: Lab 3 - Part 1 Tests"
fi
echo   "--------------------------------------------------"

# Scores for Part 1 #

if [[ $opt == "part1" ]]; then
    printf "IO Redirection:                  %03.3f%s%03.3f\n" $grade1 " of " $grade1max
    printf "Pipes:                           %03.3f%s%03.3f\n" $grade2 " of " $grade2max
    printf "Background Processes:            %03.3f%s%03.3f\n" $grade3 " of " $grade3max
fi

# Scores for Part 2 #

if [[ $opt == "part2" ]]; then
    printf "IO Redirection:                  %03.3f%s%03.3f\n" $grade1 " of " $grade1max
    printf "Pipes:                           %03.3f%s%03.3f\n" $grade2 " of " $grade2max
    printf "Background Processes:            %03.3f%s%03.3f\n" $grade3 " of " $grade3max
    printf "Zombie Processes:                %03.3f%s%03.3f\n" $grade4 " of " $grade4max
    printf "Extended Parsing:                %03.3f%s%03.3f\n" $grade5 " of " $grade5max
    printf "Bulitin Functions:               %03.3f%s%03.3f\n" $grade6 " of " $grade6max
    printf "cd:                              %03.3f%s%03.3f\n" $grade7 " of " $grade7max
fi

# Scores for Final #

if [[ $opt == "final" || $opt == "ALL" ]]; then
    printf "IO Redirection:                  %03.3f%s%03.3f\n" $grade1 " of " $grade1max
    printf "Pipes:                           %03.3f%s%03.3f\n" $grade2 " of " $grade2max
    printf "Background Processes:            %03.3f%s%03.3f\n" $grade3 " of " $grade3max
    printf "Zombie Processes:                %03.3f%s%03.3f\n" $grade4 " of " $grade4max
    printf "Extended Parsing:                %03.3f%s%03.3f\n" $grade5 " of " $grade5max
    printf "Bulitin Functions:               %03.3f%s%03.3f\n" $grade6 " of " $grade6max
    printf "cd:                              %03.3f%s%03.3f\n" $grade7 " of " $grade7max
    printf "Subshell:                        %03.3f%s%03.3f\n" $grade8 " of " $grade8max 
    printf "Environment Variable Expansion:  %03.3f%s%03.3f\n" $grade9 " of " $grade9max
    printf "Wildcarding:                     %03.3f%s%03.3f\n" $grade10 " of " $grade10max
    printf "Tilde Expansion:                 %03.3f%s%03.3f\n" $grade11 " of " $grade11max
    printf "Robustness:                      %03.3f%s%03.3f\n" $grade12 " of " $grade12max
fi

# Footer + Total Score #

echo   "---------------------------------------------------"
printf "Testall Total:                   %03.3f%s%03.3f\n" $total " of " $totalmax


# Write Total Score to File #

if [[ $opt == "part3" ]]; then
    printf "Total:                   %03.3f%s%03.3f\n" $total " of " $totalmax >> testall.out
elif [[ $opt == "part2" ]]; then
    echo $total
    printf "Part 2 Total:            %03.3f%s%03.3f\n" $total " of " $totalmax > testall.out
else
    printf "Part 1 Total:            %03.3f%s%03.3f\n" $total " of " $totalmax > testall.out
fi
